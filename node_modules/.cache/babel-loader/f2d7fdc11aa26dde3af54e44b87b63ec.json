{"ast":null,"code":"const _ = require(\"lodash\");\n\nconst taxYearInfo = {\n  _2019to2020: {\n    pA: 12500,\n    higherRateStart: 50000,\n    pAReductionStart: 100000,\n    additionalRateStart: 150000,\n    pAReductionRate: 0.5,\n    basicRate: 0.2,\n    higherRate: 0.4,\n    additionalRate: 0.45,\n    nILowerLimit: 719,\n    nIUpperLimit: 4167,\n    nILowerRate: 0.12,\n    nIUpperRate: 0.02\n  },\n  _2020to2021: {\n    pA: 12500,\n    higherRateStart: 50000,\n    pAReductionStart: 100000,\n    additionalRateStart: 150000,\n    pAReductionRate: 0.5,\n    basicRate: 0.2,\n    higherRate: 0.4,\n    additionalRate: 0.45,\n    nILowerLimit: 792,\n    nIUpperLimit: 4167,\n    nILowerRate: 0.12,\n    nIUpperRate: 0.02\n  }\n}; // A reusable tax calculator.\n//\n\nclass Calculator {\n  constructor(taxYearInfo) {\n    this.pA = taxYearInfo.pA;\n    this.higherRateStart = taxYearInfo.higherRateStart;\n    this.pAReductionStart = taxYearInfo.pAReductionStart;\n    this.additionalRateStart = taxYearInfo.additionalRateStart;\n    this.pAReductionRate = taxYearInfo.pAReductionRate;\n    this.basicRate = taxYearInfo.basicRate;\n    this.higherRate = taxYearInfo.higherRate;\n    this.additionalRate = taxYearInfo.additionalRate;\n    this.nILowerLimit = taxYearInfo.nILowerLimit;\n    this.nIUpperLimit = taxYearInfo.nIUpperLimit;\n    this.nILowerRate = taxYearInfo.nILowerRate;\n    this.nIUpperRate = taxYearInfo.nIUpperRate;\n  }\n\n  salaryAtBasicRate(salary) {\n    let salaryAtBasicRate; // Salary within personal allowance\n\n    if (salary <= this.pA) salaryAtBasicRate = 0; // Salary within basic rate range\n    else if (salary <= this.higherRateStart) salaryAtBasicRate = salary - this.pA; // Salary at basic rate stops increasing once we go into the higher rate range\n      else if (salary <= this.pAReductionStart) salaryAtBasicRate = this.higherRateStart - this.pA; // Personal allowance starts reducing, the reduction gets added onto the basic rate salary\n        else if (salary <= this.pAReductionStart + this.pA / this.pAReductionRate) {\n            const pA_reduction = Math.floor((salary - this.pAReductionStart) * this.pAReductionRate);\n            salaryAtBasicRate = this.higherRateStart - this.pA + pA_reduction; // Personal allowance is zero, basic rate salary stops increasing\n          } else salaryAtBasicRate = this.higherRateStart;\n    return salaryAtBasicRate;\n  }\n\n  salaryAtHigherRate(salary) {\n    let salaryAtHigherRate;\n    if (salary <= this.higherRateStart) salaryAtHigherRate = 0;else if (salary <= this.additionalRateStart) salaryAtHigherRate = salary - this.higherRateStart;else salaryAtHigherRate = this.additionalRateStart - this.higherRateStart;\n    return salaryAtHigherRate;\n  }\n\n  salaryAtAdditionalRate(salary) {\n    let salaryAtAdditionalRate;\n    if (salary <= this.additionalRateStart) salaryAtAdditionalRate = 0;else salaryAtAdditionalRate = salary - this.additionalRateStart;\n    return salaryAtAdditionalRate;\n  }\n\n  incomeTax(salary) {\n    let incomeTax = this.salaryAtBasicRate(salary) * this.basicRate + this.salaryAtHigherRate(salary) * this.higherRate + this.salaryAtAdditionalRate(salary) * this.additionalRate;\n    incomeTax = _.round(incomeTax);\n    return incomeTax;\n  }\n\n  nationalInsurance(salary) {\n    const lowerLimit = this.nILowerLimit * 12;\n    const upperLimit = this.nIUpperLimit * 12;\n    const lowerRate = this.nILowerRate;\n    const upperRate = this.nIUpperRate;\n    let nI;\n\n    if (salary <= lowerLimit) {\n      nI = 0;\n    } else if (salary <= upperLimit) {\n      nI = (salary - lowerLimit) * lowerRate;\n    } else {\n      nI = (salary - upperLimit) * upperRate + (upperLimit - lowerLimit) * lowerRate;\n    }\n\n    nI = _.round(nI);\n    return nI;\n  }\n\n  takeHomePay(salary) {\n    return _.round(salary - this.incomeTax(salary) - this.nationalInsurance(salary), 2);\n  } // To calculate the gross salary from take home pay, I worked out what the take home pay would be at\n  // each of the boundaries where the NI and income tax calculations change\n  // I took the specific formula for NI and income between each of these boundaries and used\n  // An algebra calculator to reverse engineer the formula: income = salary - NI - incomeTax\n  // Which gave the salary\n\n\n  salaryFromTakeHome(income) {\n    let salary;\n    const lowerLimit = this.nILowerLimit * 12;\n    const upperLimit = this.nIUpperLimit * 12; // 1) Income less than NI lower limit\n\n    if (income <= lowerLimit) {\n      salary = income;\n    } // 2) Income within NI Lower limit\n    // 2a) Income still in personal allowance\n    // else if (income <= this.takeHomePay(12500)) {\n    //   salary = (25 * income - 3 * lowerLimit) / 22;\n    // }\n    else if (income <= this.takeHomePay(this.pA)) {\n        salary = (income - this.nILowerRate * lowerLimit) / (1 - this.nILowerRate);\n      } // 2b) Income within basic range\n      // else if (income <= this.takeHomePay(50000)) {\n      //   salary = (25 * income - 3 * lowerLimit - 62500) / 17;\n      // }\n      else if (income <= this.takeHomePay(this.higherRateStart)) {\n          salary = (income - this.nILowerRate * lowerLimit - this.basicRate * this.pA) / (1 - this.nILowerRate - this.basicRate);\n        } // 2c) Income within higher rate\n        // else if (income <= this.takeHomePay(50004)) {\n        //   salary = (income - 0.12 * lowerLimit - 12500) / 0.48;\n        // }\n        else if (income <= this.takeHomePay(upperLimit)) {\n            salary = (income - this.nILowerRate * lowerLimit + this.basicRate * this.higherRateStart - this.basicRate * this.pA - this.higherRate * this.higherRateStart) / (1 - this.nILowerRate - this.higherRate);\n          } // 3) Income above NI UEL\n          // 3a) Higher income rate\n          // else if (income <= this.takeHomePay(100000)) {\n          //   salary = (income - 0.12 * lowerLimit - 7499.6) / 0.58;\n          // }\n          else if (income <= this.takeHomePay(this.pAReductionStart)) {\n              salary = (income + this.nILowerRate * (upperLimit - lowerLimit) + this.basicRate * this.higherRateStart - this.basicRate * this.pA - this.nIUpperRate * this.nIUpperLimit * 12 - this.higherRate * this.higherRateStart) / (1 - this.nIUpperRate - this.higherRate);\n            } // 3b) Personal allowance reducing\n            else if (income <= this.takeHomePay(125000)) {\n                salary = (income - 0.12 * lowerLimit - 17499.6) / 0.48;\n              } // 3c) Personal allowance is zero\n              else if (income <= this.takeHomePay(150000)) {\n                  salary = (income - 0.12 * lowerLimit - 4999.6) / 0.58;\n                } // 3d) Highest rate\n                else {\n                    salary = (income - 0.12 * lowerLimit - 12499.6) / 0.53;\n                  }\n\n    return _.round(salary);\n  }\n\n}\n\nexport const taxYear_19to20 = new Calculator(taxYearInfo._2019to2020);\nexport const taxYear_20to21 = new Calculator(taxYearInfo._2020to2021);","map":{"version":3,"sources":["/Users/josephtavinor/jtavinor_tax_calculator/src/reusableTaxCalculator.js"],"names":["_","require","taxYearInfo","_2019to2020","pA","higherRateStart","pAReductionStart","additionalRateStart","pAReductionRate","basicRate","higherRate","additionalRate","nILowerLimit","nIUpperLimit","nILowerRate","nIUpperRate","_2020to2021","Calculator","constructor","salaryAtBasicRate","salary","pA_reduction","Math","floor","salaryAtHigherRate","salaryAtAdditionalRate","incomeTax","round","nationalInsurance","lowerLimit","upperLimit","lowerRate","upperRate","nI","takeHomePay","salaryFromTakeHome","income","taxYear_19to20","taxYear_20to21"],"mappings":"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","sourcesContent":["const _ = require(\"lodash\");\n\nconst taxYearInfo = {\n  _2019to2020: {\n    pA: 12500,\n    higherRateStart: 50000,\n    pAReductionStart: 100000,\n    additionalRateStart: 150000,\n    pAReductionRate: 0.5,\n    basicRate: 0.2,\n    higherRate: 0.4,\n    additionalRate: 0.45,\n    nILowerLimit: 719,\n    nIUpperLimit: 4167,\n    nILowerRate: 0.12,\n    nIUpperRate: 0.02,\n  },\n\n  _2020to2021: {\n    pA: 12500,\n    higherRateStart: 50000,\n    pAReductionStart: 100000,\n    additionalRateStart: 150000,\n    pAReductionRate: 0.5,\n    basicRate: 0.2,\n    higherRate: 0.4,\n    additionalRate: 0.45,\n    nILowerLimit: 792,\n    nIUpperLimit: 4167,\n    nILowerRate: 0.12,\n    nIUpperRate: 0.02,\n  },\n};\n\n// A reusable tax calculator.\n//\nclass Calculator {\n  constructor(taxYearInfo) {\n    this.pA = taxYearInfo.pA;\n    this.higherRateStart = taxYearInfo.higherRateStart;\n    this.pAReductionStart = taxYearInfo.pAReductionStart;\n    this.additionalRateStart = taxYearInfo.additionalRateStart;\n    this.pAReductionRate = taxYearInfo.pAReductionRate;\n    this.basicRate = taxYearInfo.basicRate;\n    this.higherRate = taxYearInfo.higherRate;\n    this.additionalRate = taxYearInfo.additionalRate;\n    this.nILowerLimit = taxYearInfo.nILowerLimit;\n    this.nIUpperLimit = taxYearInfo.nIUpperLimit;\n    this.nILowerRate = taxYearInfo.nILowerRate;\n    this.nIUpperRate = taxYearInfo.nIUpperRate;\n  }\n\n  salaryAtBasicRate(salary) {\n    let salaryAtBasicRate;\n    // Salary within personal allowance\n    if (salary <= this.pA) salaryAtBasicRate = 0;\n    // Salary within basic rate range\n    else if (salary <= this.higherRateStart)\n      salaryAtBasicRate = salary - this.pA;\n    // Salary at basic rate stops increasing once we go into the higher rate range\n    else if (salary <= this.pAReductionStart)\n      salaryAtBasicRate = this.higherRateStart - this.pA;\n    // Personal allowance starts reducing, the reduction gets added onto the basic rate salary\n    else if (salary <= this.pAReductionStart + this.pA / this.pAReductionRate) {\n      const pA_reduction = Math.floor(\n        (salary - this.pAReductionStart) * this.pAReductionRate\n      );\n      salaryAtBasicRate = this.higherRateStart - this.pA + pA_reduction;\n      // Personal allowance is zero, basic rate salary stops increasing\n    } else salaryAtBasicRate = this.higherRateStart;\n\n    return salaryAtBasicRate;\n  }\n\n  salaryAtHigherRate(salary) {\n    let salaryAtHigherRate;\n    if (salary <= this.higherRateStart) salaryAtHigherRate = 0;\n    else if (salary <= this.additionalRateStart)\n      salaryAtHigherRate = salary - this.higherRateStart;\n    else salaryAtHigherRate = this.additionalRateStart - this.higherRateStart;\n\n    return salaryAtHigherRate;\n  }\n\n  salaryAtAdditionalRate(salary) {\n    let salaryAtAdditionalRate;\n    if (salary <= this.additionalRateStart) salaryAtAdditionalRate = 0;\n    else salaryAtAdditionalRate = salary - this.additionalRateStart;\n\n    return salaryAtAdditionalRate;\n  }\n\n  incomeTax(salary) {\n    let incomeTax =\n      this.salaryAtBasicRate(salary) * this.basicRate +\n      this.salaryAtHigherRate(salary) * this.higherRate +\n      this.salaryAtAdditionalRate(salary) * this.additionalRate;\n\n    incomeTax = _.round(incomeTax);\n    return incomeTax;\n  }\n\n  nationalInsurance(salary) {\n    const lowerLimit = this.nILowerLimit * 12;\n    const upperLimit = this.nIUpperLimit * 12;\n    const lowerRate = this.nILowerRate;\n    const upperRate = this.nIUpperRate;\n    let nI;\n\n    if (salary <= lowerLimit) {\n      nI = 0;\n    } else if (salary <= upperLimit) {\n      nI = (salary - lowerLimit) * lowerRate;\n    } else {\n      nI =\n        (salary - upperLimit) * upperRate +\n        (upperLimit - lowerLimit) * lowerRate;\n    }\n\n    nI = _.round(nI);\n    return nI;\n  }\n\n  takeHomePay(salary) {\n    return _.round(\n      salary - this.incomeTax(salary) - this.nationalInsurance(salary),\n      2\n    );\n  }\n\n  // To calculate the gross salary from take home pay, I worked out what the take home pay would be at\n  // each of the boundaries where the NI and income tax calculations change\n  // I took the specific formula for NI and income between each of these boundaries and used\n  // An algebra calculator to reverse engineer the formula: income = salary - NI - incomeTax\n  // Which gave the salary\n  salaryFromTakeHome(income) {\n    let salary;\n\n    const lowerLimit = this.nILowerLimit * 12;\n    const upperLimit = this.nIUpperLimit * 12;\n\n    // 1) Income less than NI lower limit\n    if (income <= lowerLimit) {\n      salary = income;\n    }\n\n    // 2) Income within NI Lower limit\n    // 2a) Income still in personal allowance\n    // else if (income <= this.takeHomePay(12500)) {\n    //   salary = (25 * income - 3 * lowerLimit) / 22;\n    // }\n    else if (income <= this.takeHomePay(this.pA)) {\n      salary =\n        (income - this.nILowerRate * lowerLimit) / (1 - this.nILowerRate);\n    }\n    // 2b) Income within basic range\n    // else if (income <= this.takeHomePay(50000)) {\n    //   salary = (25 * income - 3 * lowerLimit - 62500) / 17;\n    // }\n    else if (income <= this.takeHomePay(this.higherRateStart)) {\n      salary =\n        (income - this.nILowerRate * lowerLimit - this.basicRate * this.pA) /\n        (1 - this.nILowerRate - this.basicRate);\n    }\n    // 2c) Income within higher rate\n    // else if (income <= this.takeHomePay(50004)) {\n    //   salary = (income - 0.12 * lowerLimit - 12500) / 0.48;\n    // }\n    else if (income <= this.takeHomePay(upperLimit)) {\n      salary =\n        (income -\n          this.nILowerRate * lowerLimit +\n          this.basicRate * this.higherRateStart -\n          this.basicRate * this.pA -\n          this.higherRate * this.higherRateStart) /\n        (1 - this.nILowerRate - this.higherRate);\n    }\n\n    // 3) Income above NI UEL\n    // 3a) Higher income rate\n    // else if (income <= this.takeHomePay(100000)) {\n    //   salary = (income - 0.12 * lowerLimit - 7499.6) / 0.58;\n    // }\n    else if (income <= this.takeHomePay(this.pAReductionStart)) {\n      salary =\n        (income +\n          this.nILowerRate * (upperLimit - lowerLimit) +\n          this.basicRate * this.higherRateStart -\n          this.basicRate * this.pA -\n          this.nIUpperRate * this.nIUpperLimit * 12 -\n          this.higherRate * this.higherRateStart) /\n        (1 - this.nIUpperRate - this.higherRate);\n    }\n    // 3b) Personal allowance reducing\n    else if (income <= this.takeHomePay(125000)) {\n      salary = (income - 0.12 * lowerLimit - 17499.6) / 0.48;\n    }\n\n    // 3c) Personal allowance is zero\n    else if (income <= this.takeHomePay(150000)) {\n      salary = (income - 0.12 * lowerLimit - 4999.6) / 0.58;\n    }\n    // 3d) Highest rate\n    else {\n      salary = (income - 0.12 * lowerLimit - 12499.6) / 0.53;\n    }\n\n    return _.round(salary);\n  }\n}\n\nexport const taxYear_19to20 = new Calculator(taxYearInfo._2019to2020);\nexport const taxYear_20to21 = new Calculator(taxYearInfo._2020to2021);\n"]},"metadata":{},"sourceType":"module"}